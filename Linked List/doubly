#include <stdio.h>
#include <stdlib.h>

typedef struct node {
    int data;
    struct node *next;
    struct node *prev;  // Previous pointer for doubly linked list
} Node;

typedef struct {
    Node *head;
    Node *tail;  // Optional: for easier insertion at end
    int count;
} List;

List* initialize(List *L);
void empty(List *list);
void insertFirst(List *list, int data);
void insertLast(List *list, int data);
void insertPos(List *list, int data, int index);
void deleteStart(List *list);
void deleteLast(List *list);
void deletePos(List *list, int index);
int retrieve(List *list, int index);
int locate(List *list, int data);
void displayForward(List *list);
void displayBackward(List *list);

int main() {
    List *list = initialize(NULL);
    if(list == NULL) return 1;

    printf("Inserting at the start:\n");
    insertFirst(list, 10);
    insertFirst(list, 20);
    insertFirst(list, 30);
    displayForward(list); // Expected: 30 20 10

    printf("\nInserting at the end:\n");
    insertLast(list, 40);
    insertLast(list, 50);
    displayForward(list); // Expected: 30 20 10 40 50

    printf("\nInserting at position 2:\n");
    insertPos(list, 99, 2);
    displayForward(list); // Expected: 30 20 99 10 40 50

    printf("\nDeleting first element:\n");
    deleteStart(list);
    displayForward(list); // Expected: 20 99 10 40 50

    printf("\nDeleting last element:\n");
    deleteLast(list);
    displayForward(list); // Expected: 20 99 10 40

    printf("\nDeleting element at position 1:\n");
    deletePos(list, 1);
    displayForward(list); // Expected: 20 10 40

    printf("\nRetrieve index 1: %d\n", retrieve(list, 1)); // Expected: 10
    printf("Locate value 40: %d\n", locate(list, 40));   // Expected: 2
    printf("Locate value 100: %d\n", locate(list, 100)); // Expected: -1 (not found)

    printf("\nDisplay backward:\n");
    displayBackward(list); // Expected: 40 10 20

    printf("\nEmptying list...\n");
    empty(list);
    displayForward(list); // Expected: nothing

    free(list);
    return 0;
}

List* initialize(List *L){
    List *list = malloc(sizeof(List));
    if(list == NULL){
        printf("NULL");
        return NULL;
    }
    list->head = NULL;
    list->tail = NULL;
    list->count = 0;
    return list;
}

void empty(List *list){
    Node *current = list->head;
    Node *temp;
    while(current != NULL){
        temp = current->next;
        free(current);
        current = temp;
    }
    list->head = NULL;
    list->tail = NULL;
    list->count = 0;
}

void insertFirst(List *list, int data){
    Node *newNode = malloc(sizeof(Node));
    if(newNode == NULL){
        printf("failed");
        return;
    }
    newNode->data = data;
    newNode->prev = NULL;
    newNode->next = list->head;

    if(list->head != NULL)
        list->head->prev = newNode;
    else
        list->tail = newNode; // First node is also tail

    list->head = newNode;
    list->count++;
}

void insertLast(List *list, int data){
    Node *newNode = malloc(sizeof(Node));
    if(newNode == NULL){
        printf("failed");
        return;
    }
    newNode->data = data;
    newNode->next = NULL;
    newNode->prev = list->tail;

    if(list->tail != NULL)
        list->tail->next = newNode;
    else
        list->head = newNode; // Empty list, first node

    list->tail = newNode;
    list->count++;
}

void insertPos(List *list, int data, int index){
    if(index < 0 || index > list->count){
        printf("Invalid index\n");
        return;
    }
    if(index == 0){
        insertFirst(list, data);
        return;
    }
    if(index == list->count){
        insertLast(list, data);
        return;
    }

    Node *newNode = malloc(sizeof(Node));
    if(newNode == NULL){
        printf("Memory allocation failed\n");
        return;
    }
    newNode->data = data;

    Node *current = list->head;
    for(int i = 0; i < index - 1; i++){
        current = current->next;
    }

    newNode->next = current->next;
    newNode->prev = current;
    current->next->prev = newNode;
    current->next = newNode;

    list->count++;
}

void deleteStart(List *list){
    if(list->head == NULL){
        printf("Empty");
        return;
    }
    Node *temp = list->head;
    list->head = list->head->next;
    if(list->head != NULL)
        list->head->prev = NULL;
    else
        list->tail = NULL; // List became empty
    free(temp);
    list->count--;
}

void deleteLast(List *list){
    if(list->tail == NULL){
        printf("Empty");
        return;
    }
    Node *temp = list->tail;
    list->tail = list->tail->prev;
    if(list->tail != NULL)
        list->tail->next = NULL;
    else
        list->head = NULL; // List became empty
    free(temp);
    list->count--;
}

void deletePos(List *list, int index){
    if(index < 0 || index >= list->count || list->head == NULL){
        printf("invalid");
        return;
    }
    if(index == 0){
        deleteStart(list);
        return;
    }
    if(index == list->count - 1){
        deleteLast(list);
        return;
    }

    Node *current = list->head;
    for(int i = 0; i < index; i++){
        current = current->next;
    }

    current->prev->next = current->next;
    current->next->prev = current->prev;
    free(current);
    list->count--;
}

int retrieve(List *list, int index){
    if(index < 0 || index >= list->count){
        printf("Invalid");
        return -1;
    }
    Node *current = list->head;
    for(int i = 0; i < index; i++){
        current = current->next;
    }
    return current->data;
}

int locate(List *list, int data){
    Node *current = list->head;
    int index = 0;
    while(current != NULL){
        if(current->data == data)
            return index;
        current = current->next;
        index++;
    }
    return -1;
}

void displayForward(List *list){
    Node *current = list->head;
    while(current != NULL){
        printf("%d\n", current->data);
        current = current->next;
    }
}

void displayBackward(List *list){
    Node *current = list->tail;
    while(current != NULL){
        printf("%d\n", current->data);
        current = current->prev;
    }
}
